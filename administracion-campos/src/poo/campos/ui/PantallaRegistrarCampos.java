/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poo.campos.ui;

import java.awt.event.WindowEvent;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import poo.campos.clases.Campo;
import poo.campos.clases.Lote;
import poo.campos.clases.TipoSuelo;
import poo.campos.controlador.GestorCampos;


/**
 *
 * @author roque.ortega
 */
public class PantallaRegistrarCampos extends javax.swing.JFrame {
    //Se declaran listas para usarlas en los desplegables
    private List<TipoSuelo> tiposSuelos;
    private final GestorCampos gestor;
    private List<Lote> lotesAgregados;
    
    private final LotesTableModel tablalotesModel;
    

    //Constructor que recibe las listas con objetos y el gestor
    public PantallaRegistrarCampos(List<TipoSuelo> tiposRecibidos, GestorCampos gestorRecibido) {
        System.out.println("En el constructor2 de la clase: PantallaRegistrarCampos");
        
        //Obtengo los generos recibidos como parametro
        this.tiposSuelos = tiposRecibidos;
        this.gestor = gestorRecibido;
        this.lotesAgregados = new ArrayList();
        //Se inicializa la tabla
        this.tablalotesModel = new LotesTableModel(this.lotesAgregados);
        
        initComponents();
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        buttonGroup1 = new javax.swing.ButtonGroup();
        txtNombre = new javax.swing.JTextField();
        lblNombreCampo = new javax.swing.JLabel();
        selTiposSuelo = new javax.swing.JComboBox<>();
        lblTipoSuelo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblSuperficie = new javax.swing.JLabel();
        txtSuperficieCampo = new javax.swing.JTextField();
        lblHectareas = new javax.swing.JLabel();
        lblNombreCampo1 = new javax.swing.JLabel();
        lblNroLote = new javax.swing.JLabel();
        txtNroLote = new javax.swing.JTextField();
        lblSuperficieLote = new javax.swing.JLabel();
        txtSuperficieLote = new javax.swing.JTextField();
        lblHectareas1 = new javax.swing.JLabel();
        btnConfirmar = new javax.swing.JButton();
        cmdCancelar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        btnAgregarLote = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaLotes = new javax.swing.JTable();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registrar Campos");
        setName("Registrar Pelicula"); // NOI18N

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        lblNombreCampo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNombreCampo.setText("Nombre:");

        selTiposSuelo.setModel(new javax.swing.DefaultComboBoxModel(tiposSuelos.toArray())
        );

        lblTipoSuelo.setText("Tipo de suelo:");

        lblSuperficie.setText("Superficie:");

        txtSuperficieCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSuperficieCampoActionPerformed(evt);
            }
        });

        lblHectareas.setText("ha");

        lblNombreCampo1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblNombreCampo1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblNombreCampo1.setText("Lotes");

        lblNroLote.setText("Nro:");
        lblNroLote.setToolTipText("");

        lblSuperficieLote.setText("Superficie:");

        txtSuperficieLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSuperficieLoteActionPerformed(evt);
            }
        });

        lblHectareas1.setText("ha");

        btnConfirmar.setText("Registrar Campo");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        cmdCancelar.setText("Cancelar");
        cmdCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelarActionPerformed(evt);
            }
        });

        btnAgregarLote.setText("Agregar Lote");
        btnAgregarLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarLoteActionPerformed(evt);
            }
        });

        tablaLotes.setModel(this.tablalotesModel);
        jScrollPane1.setViewportView(tablaLotes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(cmdCancelar)
                        .addGap(42, 42, 42)
                        .addComponent(btnConfirmar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNombreCampo1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(46, 46, 46)
                                                .addComponent(lblNroLote)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtNroLote, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(21, 21, 21)
                                                .addComponent(lblSuperficieLote)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtSuperficieLote, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblHectareas1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblTipoSuelo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAgregarLote)
                                            .addComponent(selTiposSuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(61, 61, 61)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblSuperficie))
                            .addComponent(lblNombreCampo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNombre)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSuperficieCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblHectareas)
                                .addGap(0, 225, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombreCampo)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSuperficie)
                    .addComponent(txtSuperficieCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHectareas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNombreCampo1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNroLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNroLote))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSuperficieLote)
                            .addComponent(txtSuperficieLote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHectareas1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTipoSuelo)
                            .addComponent(selTiposSuelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addComponent(btnAgregarLote)
                        .addGap(51, 51, 51)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmdCancelar)
                            .addComponent(btnConfirmar)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        // TODO add your handling code here:
        //Validamos los datos minimos
        if (txtNombre.getText().isEmpty() || txtSuperficieCampo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe informar: Nombre y Superficie del campo.",
                    "Campos obligatorios",0);            
        }
        else {//Entra si se cargaron los datos obligatorios
            
            //Se debe verificar si ya existe un campo con ese nombre
            if (gestor.yaExisteElNombreDelCampo(txtNombre.getText())){
                JOptionPane.showMessageDialog(null, "No puede guardar, ya existe un campo registrado con ese nombre",
                        "Validación nombre de campo",0);
            }else{//Entra si el nombre NO existe aún
                //Obtenemos los datos ingresados por el usuario
                String nombre = txtNombre.getText();
                String superficieCampo=  txtSuperficieCampo.getText();
                BigDecimal supConvertida= new BigDecimal(superficieCampo);

                //Se crea un objeto de la clase Campo mediante un constructor
                Campo nuevoCampo= new Campo();
                nuevoCampo.setNombre(nombre);
                nuevoCampo.setSuperficie(supConvertida);            

                //Verifico si se agregó algún Lote
                if (lotesAgregados.isEmpty()){
                    JOptionPane.showMessageDialog(null, "No puede guardar el campo, debe agregar por lo menos un lote.",
                            "Validación agregado de lotes",0);                    
                }else{//Entra si se ingresaron todos los datos obligatorios
                    //Ahora se setean los lotes agregados
                    nuevoCampo.setLotes(lotesAgregados);
                    
                    //Se debe verificar que la suma de la superficie de los lotes coincida con la sup del campo
                    if (!nuevoCampo.superficieCoincideConLaDeLotes()){//Entra si NO COINCIDEN las superficies
                        JOptionPane.showMessageDialog(null, "No puede guardar el campo, la suma de superficies de los lotes no coincide.",
                                "Validación superficie de lotes",0);                         
                    }else{//Entra si COINCIDEN las superficies
                        
                        //Muetra carte solicitando confirmación para registrar campo 
                        int generaCampo = JOptionPane.showConfirmDialog (null, "Desea generar el nuevo Campo?", "Confirmación", JOptionPane.YES_OPTION);
                        if (generaCampo == JOptionPane.YES_OPTION) {
                            //Delegamos al gestor, para que guarde en la BASE de DATOS
                            this.gestor.guardarCampo(nuevoCampo);

                            //Notificamos al usuario
                            JOptionPane.showMessageDialog(null, "El campo: " + nuevoCampo + " ha sido agregado con éxito");            
                            //Limpia los cuadros de textos
                            txtNombre.setText("");
                            txtSuperficieCampo.setText("");   
                            //Para lotes
                            txtNroLote.setText("");
                            txtSuperficieLote.setText("");
                            lotesAgregados= new ArrayList();

                            //Acá se ACTUALIZA la tabla de lotes
                            tablalotesModel.setLotes(lotesAgregados);
                            tablalotesModel.fireTableDataChanged(); 
                        }//Fin del if que verifica si se confirma que se registre el campo                  

                    }//Fin del if que verifica si se agregaron Lotes
                }//Fin del if que verifica si se agregaron Lotes
            }//Fin del if que verifica si el nombre del campo es valido
        }//Fin del if que verifica si se cargaron todos los campos        

    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
      
    }//GEN-LAST:event_txtNombreActionPerformed

    private void cmdCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelarActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_cmdCancelarActionPerformed

    private void txtSuperficieCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSuperficieCampoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSuperficieCampoActionPerformed

    private void txtSuperficieLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSuperficieLoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSuperficieLoteActionPerformed

    private void btnAgregarLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarLoteActionPerformed
        // TODO add your handling code here:
        System.out.println("###En el boton Agregar Lote");
        //Validamos los datos minimos
        if (txtNroLote.getText().isEmpty() || txtSuperficieLote.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe informar: Número y Superficie del lote.",
                    "Campos obligatorios",0);   
        }
        else {//Entra si se cargaron los datos obligatorios
            //Obtenemos los datos ingresados por el usuario
            Long nroLote = Long.parseLong(txtNroLote.getText());
            String superficieLote=  txtSuperficieLote.getText();
            BigDecimal supConvertida= new BigDecimal(superficieLote);   
            TipoSuelo tipoSuelo= (TipoSuelo) selTiposSuelo.getSelectedItem();
            
            //Se verifica que no exista un lote con el mismo nro para este campo
            if (this.yaExisteElNroDeLote(nroLote)){
                JOptionPane.showMessageDialog(null, "No puede agregar el lote, ya existe el nro de lote ingresado.",
                        "Validación nombre de campo",0);
            }else{//Entra si el nro de lote NO existe aún
                //Se crea un NUEVOS LOTE
                Lote lote= new Lote(nroLote, supConvertida, tipoSuelo);   
                //Se agrega el lote a la lista
                this.lotesAgregados.add(lote);  

                //Acá se ACTUALIZA la tabla de lotes
                tablalotesModel.setLotes(lotesAgregados);
                tablalotesModel.fireTableDataChanged();   
                
                //Se limpian los campos
                txtNroLote.setText("");
                txtSuperficieLote.setText(""); 
                
            }//Fin del if que verifica si ya existe un lote con ese nro           
            
        }//Fin del if que verifica si se cargaron los datos obligatorios        
    }//GEN-LAST:event_btnAgregarLoteActionPerformed

    public boolean yaExisteElNroDeLote(Long nroNuevoLote) {
        System.out.println("En el metodo: yaExisteElNroDeLote()");
        boolean yaExiste= false;
        //Se debe recorrer la lista de lotes agregados
        for (Lote loteAux: this.lotesAgregados){
            if (loteAux.getNumero().equals(nroNuevoLote)){
                yaExiste= true;
            }
        }
        return yaExiste;    
    } 
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarLote;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmdCancelar;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblHectareas;
    private javax.swing.JLabel lblHectareas1;
    private javax.swing.JLabel lblNombreCampo;
    private javax.swing.JLabel lblNombreCampo1;
    private javax.swing.JLabel lblNroLote;
    private javax.swing.JLabel lblSuperficie;
    private javax.swing.JLabel lblSuperficieLote;
    private javax.swing.JLabel lblTipoSuelo;
    private javax.swing.JComboBox<String> selTiposSuelo;
    private javax.swing.JTable tablaLotes;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNroLote;
    private javax.swing.JTextField txtSuperficieCampo;
    private javax.swing.JTextField txtSuperficieLote;
    // End of variables declaration//GEN-END:variables
}
